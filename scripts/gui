#!/usr/bin/env python3
import platform
import os
import webbrowser
import ee
import subprocess
from tkinter import filedialog
from tkinter import *


global prefix
os_name = platform.system()
if os_name == "Windows":
    wrapper_command = ["python"]
    prefix = "./scripts/"
else:
    wrapper_command = []
    prefix = ""


def authenticate(window):
    def enter(entry, pipe):
        string = entry.get()

        pipe.communicate(input=str.encode(f"{string}\n"))
        entry.pack_forget()
        button_ok.pack_forget()

    pipe = subprocess.Popen(
        wrapper_command + [f"{prefix}authenticate"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
    )

    entry = Entry(window, width=40)
    entry.insert(END, "Type in your token")
    entry.pack()
    button_ok = Button(
        window,
        text="Okay",
        width=20,
        command=lambda entry=entry, pipe=pipe: enter(entry, pipe),
    )
    button_ok.pack(pady=20)


def MODIS_data():
    """
    Window for MODIS data retrieval
    """

    def OpenUrl(url):
        webbrowser.open_new(url)

    def manual_retrieval(window):
        def enter(entry_lat, entry_lon, entry_start, entry_end, output_path):
            lat = entry_lat.get()
            lon = entry_lon.get()
            start = entry_start.get()
            end = entry_end.get()
            output = output_path.get()

            subprocess.run(
                wrapper_command
                + [
                    f"{prefix}get_timeseries",
                    "--coords",
                    lon,
                    lat,
                    "--start-date",
                    start,
                    "--end-date",
                    end,
                    "--output",
                    output,
                ]
            )
            entry_lat.pack_forget()
            entry_lon.pack_forget()
            entry_start.pack_forget()
            entry_end.pack_forget()
            button_ok.pack_forget()
            output_path.pack_forget()

        entry_lat = Entry(window, width=20)
        entry_lon = Entry(window, width=20)
        entry_start = Entry(window, width=20)
        entry_end = Entry(window, width=20)
        output_path = Entry(window, width=20)

        entry_lat.insert(END, "lat")
        entry_lon.insert(END, "lon")
        entry_start.insert(END, "Start (YYYY-MM-DD)")
        entry_end.insert(END, "End (YYYY-MM-DD)")
        output_path.insert(END, "./data/output.csv")

        entry_lat.pack()
        entry_lon.pack()
        entry_start.pack()
        entry_end.pack()
        output_path.pack()

        button_ok = Button(
            window,
            text="Okay",
            width=20,
            command=lambda entry_lat=entry_lat, entry_lon=entry_lon, entry_start=entry_start, entry_end=entry_end, output_path=output_path: enter(
                entry_lat, entry_lon, entry_start, entry_end, output_path
            ),
        )
        button_ok.pack(pady=20, side="bottom")

    MODIS_data_window = Tk()
    url = "https://sangwon.users.earthengine.app/view/seaicephenology"

    button_MODIS = Button(
        MODIS_data_window,
        text="Access Google Earth Engine App",
        command=lambda aurl=url: OpenUrl(aurl),
    )
    button_MODIS.pack(side="top")

    button_authenticate = Button(
        MODIS_data_window,
        text="Manual Retrieval",
        command=lambda window=MODIS_data_window: manual_retrieval(window),
    )
    button_authenticate.pack(side="top")


def interpolate():
    """
    Window for timeseries interpolation
    """

    def select_input(label):
        def run_and_forget(cmd_line, button_run):
            try:
                subprocess.run(cmd_line)
            except Exception as e:
                button_run.forget()
                interpolation_method.forget()
                raise (e)

        def RUN(variable, input_file, button_run):
            button_run.pack_forget()

            button_run.config(
                command=lambda cmd_line=wrapper_command + [
                    f"{prefix}interpolate",
                    "--input",
                    input_file,
                    "--type",
                    variable,
                ]: run_and_forget(cmd_line, button_run),
            )
            button_run.pack(side="bottom")

        input_file = filedialog.askopenfilename(
            initialdir="./",
            title="Select a File",
            filetypes=(("CSV files", "*.csv*"), ("all files", "*.*")),
        )
        label.configure(text=f"File Opened: {input_file}")

        if input_file != ():
            button_run = Button(interpolation_window, text="RUN")

            variable = StringVar(interpolation_window)
            variable.set("Interpolation Method")
            interpolation_method = OptionMenu(
                interpolation_window,
                variable,
                "random",
                "median",
                "linear",
                "slinear",
                "gaussian",
                command=lambda variable=variable, input_file=input_file, button_run=button_run: RUN(
                    variable, input_file, button_run
                ),
            )
            interpolation_method.pack()

    interpolation_window = Tk()

    FE_frame = Frame(interpolation_window)

    label_file_explorer = Label(FE_frame, text="File Opened: ", fg="blue")

    button_explore = Button(
        FE_frame,
        text="Input File",
        command=lambda label=label_file_explorer: select_input(label),
    )
    FE_frame.pack(side="top")
    button_explore.pack(side="left")
    label_file_explorer.pack(side="left")


def phenology():
    """
    Window for sea ice phenology detection
    """

    def select_input(label):
        def run_and_forget(cmd_line, button_run):
            try:
                subprocess.run(cmd_line)
            except Exception as e:
                button_run.forget()
                phenology_method.forget()
                raise (e)

        def RUN(variable, input_file, button_run):
            button_run.pack_forget()

            button_run.config(
                command=lambda cmd_line=wrapper_command + [
                    f"{prefix}phenology",
                    "--input",
                    input_file,
                    "--type",
                    variable,
                ]: run_and_forget(cmd_line, button_run),
            )
            button_run.pack(side="bottom")

        input_file = filedialog.askopenfilename(
            initialdir="./",
            title="Select a File",
            filetypes=(("CSV files", "*.csv*"), ("all files", "*.*")),
        )
        label.configure(text=f"File Opened: {input_file}")

        if input_file != ():
            button_run = Button(phenology_window, text="RUN")

            variable = StringVar(phenology_window)
            variable.set("Phenology Method")
            phenology_method = OptionMenu(
                phenology_window,
                variable,
                "slope-diff",
                command=lambda variable=variable, input_file=input_file, button_run=button_run: RUN(
                    variable, input_file, button_run
                ),
            )
            phenology_method.pack()

    phenology_window = Tk()

    FE_frame = Frame(phenology_window)

    label_file_explorer = Label(FE_frame, text="File Opened: ", fg="blue")

    button_explore = Button(
        FE_frame,
        text="Input File",
        command=lambda label=label_file_explorer: select_input(label),
    )
    FE_frame.pack(side="top")
    button_explore.pack(side="left")
    label_file_explorer.pack(side="left")


def main():
    main_window = Tk()
    main_window.geometry("1000x500")
    main_window.config(background="white")

    title_frame = Frame(main_window, background="#D2E2FB", bd=1, relief="flat")
    title_frame.pack()

    title = Label(
        title_frame,
        text="Sea Ice Phenology Detection\nby ICE Lab at University of Victoria",
        width=50,
        height=4,
        fg="black",
        font="50",
    )
    title.config(background="white")
    title.pack()

    button_authenticate = Button(
        main_window,
        text="Authenticate Google Earth Engine Account",
        command=lambda window=main_window: authenticate(window),
    )
    button_authenticate.pack(side="top")

    button_MODIS = Button(main_window, text="Retrieve MODIS data", command=MODIS_data)
    button_MODIS.pack(side="top")

    button_interpolate = Button(
        main_window,
        text="Timeseries Interpolation",
        command=interpolate,
    )
    button_interpolate.pack(side="top")

    button_phenology = Button(
        main_window,
        text="Phenology Detection",
        command=phenology,
    )
    button_phenology.pack(side="top")

    button_exit = Button(main_window, text="Exit", command=exit)
    button_exit.pack(side="bottom")

    main_window.mainloop()


if __name__ == "__main__":
    main()
