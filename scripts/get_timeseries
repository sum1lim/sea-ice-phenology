#!/usr/bin/env python3
import ee
import argparse
import tempfile
import csv
from tqdm import tqdm


def getQABits(number, start, end):
    i = 0
    bit_mask = 0
    while i < 16:
        if not i < start and not i > end:
            bit_mask += 2**i
        i += 1

    return number & bit_mask


def id_img_dict(img_collection, roi, band):
    ret_dict = {}
    img_li = img_collection.toList(img_collection.size())
    for i in tqdm(range(img_collection.size().getInfo())):
        id = ee.Image(img_li.get(i)).id().getInfo()
        try:
            ret_dict[id] = (
                ee.Image(img_li.get(i))
                .sample(roi)
                .getInfo()["features"][0]["properties"][band]
            )
        except IndexError:
            continue

    return ret_dict


def main(args):
    ee.Initialize()

    roi = ee.Geometry.Point(args.coords[0], args.coords[1])

    modis = (
        ee.ImageCollection("MODIS/006/MOD09GQ")
        .filterDate(args.start_date, args.end_date)
        .filterBounds(roi)
        .select(["sur_refl_b01", "sur_refl_b02"], ["B1", "B2"])
    )
    modis_qa = (
        ee.ImageCollection("MODIS/006/MOD09GA")
        .filterDate("2022-01-01", "2022-01-31")
        .filterBounds(roi)
        .select("state_1km")
    )

    qa_dict = id_img_dict(modis_qa, roi, "state_1km")
    B1_dict = id_img_dict(modis, roi, "B1")
    B2_dict = id_img_dict(modis, roi, "B2")
    with open("./data/output.csv", "w") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["system:time_start", "B1", "B2"])
        for k, v in qa_dict.items():
            if getQABits(v, 0, 1) == 0:
                writer.writerow([k, B1_dict[k], B2_dict[k]])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--coords",
        nargs=2,
        type=float,
        help="Area of Interest (AOI) defined by lon, lat coordiates",
        required=True,
    )
    parser.add_argument(
        "--start-date",
        type=str,
        help="YYYY-MM-DD",
        required=True,
    )
    parser.add_argument(
        "--end-date",
        type=str,
        help="YYYY-MM-DD",
        required=True,
    )

    args = parser.parse_args()

    main(args)
