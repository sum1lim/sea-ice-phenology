#!/usr/bin/env python3
import ee
import argparse
import csv
from tqdm import tqdm


def getQABits(number, start, end):
    i = 0
    bit_mask = 0
    while i < 16:
        if not i < start and not i > end:
            bit_mask += 2 ** i
        i += 1

    return number & bit_mask


def id_pixel_dict(pixels, bands):
    if type(bands) == str:
        bands = [bands]

    ret_dicts = [{} for _ in range(len(bands))]
    try:
        pix_li = pixels.getInfo()
    except ee.ee_exception.EEException:
        return ret_dicts
    id_idx = pix_li[0].index("id")
    band_idx_li = [pix_li[0].index(band) for band in bands]
    del pix_li[0]

    for pixel in tqdm(pix_li):
        key = pixel[id_idx]
        for i, band_idx in enumerate(band_idx_li):
            if pixel[band_idx] != None:
                ret_dicts[i][key] = pixel[band_idx]

    if len(ret_dicts) == 1:
        return ret_dicts[0]
    else:
        return tuple(ret_dicts)


def main(args):
    ee.Initialize()

    roi = ee.Geometry.Point(args.coords[0], args.coords[1])

    modis = (
        ee.ImageCollection("MODIS/006/MOD09GQ")
        .filterDate(args.start_date, args.end_date)
        .select(["sur_refl_b01", "sur_refl_b02"], ["B1", "B2"])
        .getRegion(roi, 0.1)
    )
    modis_qa = (
        ee.ImageCollection("MODIS/006/MOD09GA")
        .filterDate(args.start_date, args.end_date)
        .select("state_1km", "SolarZenith")
        .getRegion(roi, 0.1)
    )
    landsat = (
        ee.ImageCollection("LANDSAT/LC08/C02/T1_TOA")
        .filterDate(args.start_date, args.end_date)
        .select(["B4", "B5", "QA_PIXEL"], ["B1", "B2", "QA"])
        .getRegion(roi, 0.1)
    )

    modis_qa_dict, solar_dict = id_pixel_dict(modis_qa, ["state_1km", "SolarZenith"])
    modis_B1_dict, modis_B2_dict = id_pixel_dict(modis, ["B1", "B2"])
    landsat_B1_dict, landsat_B2_dict, landsat_qa_dict = id_pixel_dict(
        landsat, ["B1", "B2", "QA"]
    )

    output_dict = {}
    for k, v in landsat_qa_dict.items():
        cloud_qa = getQABits(v, 3, 3)
        if cloud_qa == 0:
            try:
                date = k.split("_")[-1]
                output_dict[f"{date[0:4]}-{date[4:6]}-{date[6:8]}"] = [
                    landsat_B1_dict[k],
                    landsat_B2_dict[k],
                ]
            except KeyError:
                continue

    for k, v in modis_qa_dict.items():
        cloud_qa = getQABits(v, 0, 1)
        if (cloud_qa == 0 or cloud_qa == 3) and solar_dict[k] <= 8600:
            try:
                output_dict[k.replace("_", "-")] = [
                    modis_B1_dict[k] / 10000,
                    modis_B2_dict[k] / 10000,
                ]
            except KeyError:
                continue

    with open(args.output, "w") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["system:time_start", "B1", "B2"])
        for k in sorted(output_dict.keys()):
            writer.writerow([k, output_dict[k][0], output_dict[k][1]])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--coords",
        nargs=2,
        type=float,
        help="Area of Interest (AOI) defined by lon, lat coordiates",
        required=True,
    )
    parser.add_argument(
        "--start-date",
        type=str,
        help="YYYY-MM-DD",
        required=True,
    )
    parser.add_argument(
        "--end-date",
        type=str,
        help="YYYY-MM-DD",
        required=True,
    )
    parser.add_argument(
        "--output",
        type=str,
        help="Output file path",
        required=True,
    )

    args = parser.parse_args()

    main(args)
