#!/usr/bin/env python3
import argparse
import os
import csv
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sea_ice_phenology.utils import interQuantileMask


def main(args):
    if not os.path.isfile(args.input) or not args.input.endswith(".csv"):
        return

    df = pd.read_csv(args.input, thousands=",")

    for phenology in df.columns:
        trend_df = None
        if phenology.endswith("phenology") == False:
            continue
        for k in ["MO", "OW", "FO"]:
            trend = df.drop(df[df[phenology] != k].index).copy()
            trend.index = pd.DatetimeIndex(trend["system:time_start"]).year
            trend[k] = pd.to_datetime(
                trend["system:time_start"], errors="coerce"
            ).dt.dayofyear
            if k in ["PO", "OW"]:
                trend = trend.groupby(trend.index).first()
            else:
                trend = trend.groupby(trend.index).last()

            trend[k] = interQuantileMask(trend[k], low="", high="").drop(
                trend[trend[k] == ""].index
            )

            if trend_df is None:
                trend_df = pd.DataFrame(trend[k])
            else:
                trend_df = trend_df.join(trend[k], how="outer")

        sns.set_style("dark")
        fig, ax = plt.subplots(figsize=(20, 4))

        p = sns.regplot(
            x=np.array(trend_df.index, dtype=float),
            y=np.array(trend_df["MO"], dtype=float),
            ax=ax,
        )
        p = sns.regplot(
            x=np.array(trend_df.index, dtype=float),
            y=np.array(trend_df["OW"], dtype=float),
            ax=ax,
        )
        p = sns.regplot(
            x=np.array(trend_df.index, dtype=float),
            y=np.array(trend_df["FO"], dtype=float),
            ax=ax,
        )
        p.set_xlabel("Year")
        p.set_ylabel("DOY")

        filename = f"{args.input.split('/')[-1].split('_phenology')[0]}_trend"
        fig.canvas.manager.set_window_title(filename)

        plt.grid()
        if args.save_fig:
            plt.savefig(f"{args.output}/{filename}.png")
        else:
            plt.show()

        trend_df["Year"] = trend_df.index
        trend_df = trend_df[["Year", "MO", "OW", "FO"]]
        trend_df.to_csv(
            f"{args.output}/{filename}.csv",
            index=False,
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        nargs="+",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )
    parser.add_argument(
        "--output",
        type=str,
        help="Output dir path",
        required=True,
    )
    parser.add_argument(
        "--save-fig",
        action="store_true",
        help="Save figures instead of prompting",
    )

    args = parser.parse_args()
    if type(args.input) == list:
        inputs = args.input[:]
        for ip in inputs:
            args.input = ip
            main(args)
    else:
        main(args)
