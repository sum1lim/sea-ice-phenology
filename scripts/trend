#!/usr/bin/env python3
import argparse
import os
import csv
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sea_ice_phenology.utils import interQuantileMask

pd.options.mode.copy_on_write = True


def main(args):
    if not os.path.isfile(args.input) or not args.input.endswith(".csv"):
        return

    df = pd.read_csv(args.input, thousands=",")
    df.index = df["system:time_start"]

    year_count = 0
    for year in df.columns:
        if year.endswith("phenology"):
            tmp = df[[year]]
            tmp.index = f"{year.split('_')[0]}-" + tmp.index
            tmp = tmp.rename(columns={year: "phenology"})

            if year_count == 0:
                long_df = tmp
            else:
                long_df = pd.concat([long_df, tmp])

            year_count += 1

    trend_df = None
    for k in ["MO", "OW", "FO"]:
        trend = long_df.drop(long_df[long_df["phenology"] != k].index).copy()
        trend["system:time_start"] = trend.index
        trend.index = pd.DatetimeIndex(trend["system:time_start"]).year
        trend[k] = pd.to_datetime(
            trend["system:time_start"], errors="coerce"
        ).dt.dayofyear

        if k in ["PO", "OW"]:
            trend = trend.groupby(trend.index).first()
        else:
            trend = trend.groupby(trend.index).last()

        trend[k] = interQuantileMask(trend[k], low="", high="").drop(
            trend[trend[k] == ""].index
        )

        if trend_df is None:
            trend_df = pd.DataFrame(trend[k])
        else:
            trend_df = trend_df.join(trend[k], how="outer")

    sns.set_style("dark")
    fig, ax = plt.subplots(figsize=(20, 4))

    trend_df = trend_df.replace("", np.nan)

    p1 = sns.regplot(
        x=np.array(trend_df.index, dtype=float),
        y=np.array(trend_df["MO"], dtype=float),
        label="MO",
    )
    p2 = sns.regplot(
        x=np.array(trend_df.index, dtype=float),
        y=np.array(trend_df["OW"], dtype=float),
        label="OW",
    )
    p3 = sns.regplot(
        x=np.array(trend_df.index, dtype=float),
        y=np.array(trend_df["FO"], dtype=float),
        label="FO",
    )
    plt.xlabel("Year")
    plt.ylabel("DOY")
    plt.legend()

    filename = f"{args.input.split('/')[-1].split('_phenology')[0]}_trend"
    fig.canvas.manager.set_window_title(filename)

    plt.grid()
    if args.save_fig:
        plt.savefig(f"{args.output}/{filename}.png")
    else:
        plt.show()

    trend_df["Year"] = trend_df.index
    trend_df = trend_df[["Year", "MO", "OW", "FO"]]
    trend_df.to_csv(
        f"{args.output}/{filename}.csv",
        index=False,
    )
    plt.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        nargs="+",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )
    parser.add_argument(
        "--output",
        type=str,
        help="Output dir path",
        required=True,
    )
    parser.add_argument(
        "--save-fig",
        action="store_true",
        help="Save figures instead of prompting",
    )

    args = parser.parse_args()
    if type(args.input) == list:
        inputs = args.input[:]
        for ip in inputs:
            args.input = ip
            main(args)
    else:
        main(args)
