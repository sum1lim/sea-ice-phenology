#!/usr/bin/env python3
import argparse
from difflib import context_diff
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from scipy.stats import pearsonr
from scipy.ndimage import gaussian_filter1d
from scipy.signal import argrelextrema
from sea_ice_phenology.utils import interQuantileMask

pd.options.mode.chained_assignment = None


def coefficient_method(subset_length, sequence, band):
    coefficient_li = [0 for _ in range(subset_length)]
    idx = subset_length
    while idx < sequence.shape[0]:
        subset_1 = sequence[idx - subset_length : idx][band].dropna()
        subset_2 = sequence[idx : idx + subset_length][band].dropna()
        notna_1 = sequence[idx - subset_length : idx][band].notna()
        index_1 = notna_1[notna_1].index.astype(np.int64)
        notna_2 = sequence[idx : idx + subset_length][band].notna()
        index_2 = notna_2[notna_2].index.astype(np.int64)

        if (
            subset_1.shape[0] > 2 * subset_length // 3
            and subset_2.shape[0] > 2 * subset_length // 3
        ):
            reg_1 = (
                LinearRegression()
                .fit(np.array([subset_1.index]).reshape(-1, 1), subset_1)
                .coef_[0]
            )
            reg_2 = (
                LinearRegression()
                .fit(np.array([subset_2.index]).reshape(-1, 1), subset_2)
                .coef_[0]
            )
            r1, _ = pearsonr(index_1, subset_1)
            r2, _ = pearsonr(index_2, subset_2)

            coefficient_li.append(reg_1 * r1 - reg_2 * r2)
        else:
            coefficient_li.append(0)

        idx += 1

    return coefficient_li


def main(args):
    ts_df = pd.read_csv(args.input, thousands=",")
    ts_df["system:time_start"] = pd.to_datetime(ts_df["system:time_start"])
    ts_df.index = ts_df["system:time_start"]
    del ts_df["system:time_start"]
    subset_length = 30

    for band in ts_df.columns:
        if band.endswith("interpolate") == False:
            continue

        tmp = ts_df.copy()
        tmp["Date"] = tmp.index

        coefficient_li = coefficient_method(subset_length, tmp, band)

        tmp["anomaly"] = gaussian_filter1d(coefficient_li, 7)

        maxima = argrelextrema(tmp["anomaly"].to_numpy(), np.greater, order=30)
        minima = argrelextrema(tmp["anomaly"].to_numpy(), np.less, order=30)
        tmp["maxima"] = [1 if i in maxima[0] else 0 for i in range(len(tmp))]
        tmp["minima"] = [1 if i in minima[0] else 0 for i in range(len(tmp))]

        tmp["anomaly"] = interQuantileMask(tmp["anomaly"], low=-1, middle=0, high=1)

        # Divide timeseries into freezing, transition and melt seasons
        filtered = pd.Series(gaussian_filter1d(tmp[band], 10), index=tmp.index)
        tmp["freeze_melt"] = tmp[band].copy()
        tmp["freeze_melt"].loc[filtered.dropna().index] = filtered[
            filtered.dropna().index
        ]
        upper_thresh = (max(tmp["freeze_melt"]) - min(tmp["freeze_melt"])) * 0.7 + min(
            tmp["freeze_melt"]
        )
        lower_thresh = (max(tmp["freeze_melt"]) - min(tmp["freeze_melt"])) * 0.1 + min(
            tmp["freeze_melt"]
        )
        tmp["freeze_melt"].mask(tmp["freeze_melt"] < lower_thresh, -3, inplace=True)
        tmp["freeze_melt"].mask(
            (tmp["freeze_melt"] > lower_thresh) & (tmp["freeze_melt"] < upper_thresh),
            0,
            inplace=True,
        )
        tmp["freeze_melt"].mask(tmp["freeze_melt"] > upper_thresh, 3, inplace=True)

        # Detect dates with high probability of phenology
        tmp["phenology"] = (
            tmp["anomaly"] * tmp["maxima"]
            + tmp["anomaly"] * tmp["minima"]
            + tmp["freeze_melt"]
        )
        tmp["phenology"].mask(tmp["phenology"] == 3, 0, inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == -3, 0, inplace=True)

        # Maker for plotting
        tmp["marker"] = tmp["phenology"].abs()
        tmp["marker"].mask(tmp["marker"] > 0, "Phenology", inplace=True)
        tmp["marker"].mask(tmp["marker"] == 0, "", inplace=True)

        # Define names for phenology
        tmp["phenology"].mask(tmp["phenology"] == 0, "", inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == 4, "FU", inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == 2, "MO", inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == 1, "PO", inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == -1, "PD", inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == -2, "OW", inplace=True)
        tmp["phenology"].mask(tmp["phenology"] == -4, "FO", inplace=True)

        sns.set_style("dark")
        _, _ = plt.subplots(figsize=(20, 4))

        sns.scatterplot(
            data=tmp,
            x="Date",
            y=band,
            hue="phenology",
            palette="tab10",
            size="marker",
            sizes=(30, 5),
        )

        plt.grid()
        plt.show()

        ts_df[f"{band}_phenology"] = tmp["phenology"]

    ts_df.to_csv(f"{'.'.join(args.input.split('.')[:-1])}_phenology.csv")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )

    args = parser.parse_args()

    main(args)
