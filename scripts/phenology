#!/usr/bin/env python3
import argparse
from difflib import context_diff
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from scipy.stats import pearsonr
from scipy.ndimage import gaussian_filter1d
from scipy.signal import argrelextrema


def main(args):
    ts_df = pd.read_csv(args.input, thousands=",")
    ts_df["system:time_start"] = pd.to_datetime(ts_df["system:time_start"])
    ts_df.index = ts_df["system:time_start"]
    del ts_df["system:time_start"]

    for band in ts_df.columns:
        if band.endswith("interpolate") == False:
            continue

        coefficient_li = [0 for _ in range(15)]
        tmp = ts_df.copy()
        tmp["Date"] = tmp.index

        idx = 15
        while idx < tmp.shape[0]:
            subset_1 = tmp[idx - 15 : idx][band].dropna()
            subset_2 = tmp[idx : idx + 15][band].dropna()
            notna_1 = tmp[idx - 15 : idx][band].notna()
            index_1 = notna_1[notna_1].index.astype(np.int64)
            notna_2 = tmp[idx : idx + 15][band].notna()
            index_2 = notna_2[notna_2].index.astype(np.int64)

            if subset_1.shape[0] > 10 and subset_2.shape[0] > 10:
                reg_1 = (
                    LinearRegression()
                    .fit(np.array([subset_1.index]).reshape(-1, 1), subset_1)
                    .coef_[0]
                )
                reg_2 = (
                    LinearRegression()
                    .fit(np.array([subset_2.index]).reshape(-1, 1), subset_2)
                    .coef_[0]
                )
                r1, _ = pearsonr(index_1, subset_1)
                r2, _ = pearsonr(index_2, subset_2)

                coefficient_li.append(reg_1 * r1 - reg_2 * r2)
            else:
                coefficient_li.append(0)

            idx += 1

        tmp["anomaly"] = gaussian_filter1d(coefficient_li, 7)

        maxima = argrelextrema(tmp["anomaly"].to_numpy(), np.greater)
        minima = argrelextrema(tmp["anomaly"].to_numpy(), np.less)
        tmp["maxima"] = [1 if i in maxima[0] else 0 for i in range(len(tmp))]
        tmp["minima"] = [1 if i in minima[0] else 0 for i in range(len(tmp))]

        Q1 = tmp["anomaly"].quantile(0.25)
        Q3 = tmp["anomaly"].quantile(0.75)
        IQR = Q3 - Q1
        tmp["anomaly"].mask(tmp["anomaly"] < Q1 - 1.5 * IQR, -1, inplace=True)
        tmp["anomaly"].mask(tmp["anomaly"] > Q3 + 1.5 * IQR, 1, inplace=True)
        tmp["anomaly"].mask(
            (tmp["anomaly"] <= Q3 + 3 * IQR) & (tmp["anomaly"] >= Q1 - 3 * IQR),
            0,
            inplace=True,
        )

        tmp["phenology"] = (
            tmp["anomaly"] * tmp["maxima"] + tmp["anomaly"] * tmp["minima"]
        )
        tmp["marker"] = tmp["phenology"].abs()
        tmp["marker"].mask(tmp["marker"] == 0, "", inplace=True)
        tmp["marker"].mask(tmp["marker"] == 1, "Phenology", inplace=True)

        sns.set_style("dark")
        _, _ = plt.subplots(figsize=(20, 4))

        sns.scatterplot(
            data=tmp,
            x="Date",
            y=band,
            hue="phenology",
            palette="tab10",
            size="marker",
            sizes=(30, 10),
        )

        plt.grid()
        plt.show()

        ts_df[f"{band}_phenology"] = tmp["phenology"]

    ts_df.to_csv(f"{'.'.join(args.input.split('.')[:-1])}_phenology.csv")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )

    args = parser.parse_args()

    main(args)
