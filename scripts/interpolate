#!/usr/bin/env python3
import argparse
import math
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


def median_interpolation(series):
    new_series = {"system:time_start": [], "interpolated": []}

    for idx, item in enumerate(series.iteritems()):
        start = idx - 3
        end = idx + 4
        if start < 0:
            start = 0
        if end > len(series):
            end = len(series)

        timestamp, val = item
        if (
            math.isnan(val)
            and len(series[start:idx].dropna()) > 0
            and len(series[idx + 1 : end].dropna()) > 0
        ):
            new_series["system:time_start"].append(timestamp)
            new_series["interpolated"].append(series[start:end].median())
        else:
            new_series["system:time_start"].append(timestamp)
            new_series["interpolated"].append(val)

    df = pd.DataFrame(new_series)
    df.index = df["system:time_start"]
    return df["interpolated"]


def main(args):
    ts_df = pd.read_csv(args.input, thousands=",")
    ts_df["system:time_start"] = pd.to_datetime(ts_df["system:time_start"])
    ts_df.index = ts_df["system:time_start"]
    del ts_df["system:time_start"]
    ts_df = ts_df.asfreq("D")

    for band in ts_df.columns:
        first_valid = ts_df[band][ts_df[band].notnull()].index[0]
        last_valid = ts_df[band][ts_df[band].notnull()].index[-1]
        tmp = ts_df.loc[first_valid:last_valid].copy()
        tmp["Date"] = tmp.index
        tmp["mask"] = tmp[band].isnull()
        tmp["mask"].mask(tmp["mask"] == True, "Interpolated", inplace=True)
        tmp["mask"].mask(tmp["mask"] == False, "Original", inplace=True)

        if args.type == "linear":
            tmp[band] = tmp[band].interpolate(
                "linear", limit_direction="both", limit_area="inside", limit=3
            )
        if args.type == "slinear":
            tmp[band] = tmp[band].interpolate(
                "slinear", limit_direction="both", limit_area="inside", limit=3
            )
        if args.type == "median":
            tmp[band] = median_interpolation(tmp[band])

        Q1 = ts_df[band].quantile(0.25)
        Q3 = ts_df[band].quantile(0.75)
        IQR = Q3 - Q1
        tmp[band].mask(tmp[band] < Q1 - 1.5 * IQR, None, inplace=True)
        tmp[band].mask(tmp[band] > Q3 + 1.5 * IQR, None, inplace=True)

        sns.set_style("dark")
        _, _ = plt.subplots(figsize=(20, 4))
        sns.scatterplot(data=tmp, x="Date", y=band, hue="mask", style="mask", s=5)
        plt.grid()
        plt.show()

        ts_df[f"{band}_interpolate"] = tmp[band]

    ts_df.to_csv(f"{'.'.join(args.input.split('.')[:-1])}_{args.type}.csv")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )
    parser.add_argument(
        "--type",
        type=str,
        choices=["linear", "slinear", "median"],
        default="linear",
        help="Interpolation type",
    )

    args = parser.parse_args()

    main(args)
