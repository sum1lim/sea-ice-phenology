#!/usr/bin/env python3
import argparse
import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sea_ice_phenology.utils import interQuantileMask
from sea_ice_phenology.interpolation import (
    gaussian_interpolation,
    median_interpolation,
    random_interpolation,
)


def main(args):
    if not os.path.isfile(args.input) or not args.input.endswith(".csv"):
        return

    ts_df = pd.read_csv(args.input, thousands=",")
    ts_df["system:time_start"] = pd.to_datetime(ts_df["system:time_start"])
    ts_df = ts_df.groupby("system:time_start").mean()
    ts_df = ts_df.asfreq("D")

    for band in ts_df.columns:
        first_valid = ts_df[band][ts_df[band].notnull()].index[0]
        last_valid = ts_df[band][ts_df[band].notnull()].index[-1]
        tmp = ts_df.loc[first_valid:last_valid].copy()
        tmp["Date"] = tmp.index
        tmp["mask"] = tmp[band].isnull()
        tmp["mask"].mask(tmp["mask"] == True, "Interpolated", inplace=True)
        tmp["mask"].mask(tmp["mask"] == False, "Original", inplace=True)

        if args.type == "linear":
            tmp[band] = tmp[band].interpolate(
                "linear", limit_direction="both", limit_area="inside", limit=3
            )
        if args.type == "slinear":
            tmp[band] = tmp[band].interpolate(
                "slinear", limit_direction="both", limit_area="inside", limit=3
            )
        if args.type == "median":
            tmp[band] = median_interpolation(tmp[band])

        if args.type == "gaussian":
            tmp[band] = gaussian_interpolation(tmp[band])

        if args.type == "random":
            tmp[band] = random_interpolation(tmp[band])

        tmp[band] = interQuantileMask(tmp[band], low="", high="")

        sns.set_style("dark")
        fig, ax = plt.subplots(figsize=(20, 4))
        tmp = tmp.drop(tmp[tmp[band] == ""].index)
        sns.scatterplot(data=tmp, x="Date", y=band, hue="mask", style="mask", s=5)
        filename = f"{'.'.join(args.input.split('/')[-1].split('.')[:-1])}_interpolate"
        fig.canvas.manager.set_window_title(filename)

        plt.grid()
        if args.save_fig:
            plt.savefig(f"{args.output}/{filename}.png")
        else:
            plt.show()

        ts_df[f"{band}_interpolate"] = tmp[band]

    ts_df.to_csv(f"{args.output}/{filename}.csv")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        nargs="+",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )
    parser.add_argument(
        "--type",
        type=str,
        choices=["linear", "slinear", "median", "gaussian", "random"],
        default="random",
        help="Interpolation type",
    )
    parser.add_argument(
        "--output",
        type=str,
        help="Output dir path",
        required=True,
    )
    parser.add_argument(
        "--save-fig",
        action="store_true",
        help="Save figures instead of prompting",
    )

    args = parser.parse_args()
    if type(args.input) == list:
        inputs = args.input[:]
        for ip in inputs:
            args.input = ip
            main(args)
    else:
        main(args)
