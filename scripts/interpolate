#!/usr/bin/env python3
import argparse
import math
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter1d
from sea_ice_phenology.utils import interQuantileMask


def gaussian_interpolation(series):
    old_series = series.copy()
    new_series = series.copy()
    indices = old_series.dropna().index

    for sigma in range(5):
        new_series = pd.Series(
            gaussian_filter1d(
                new_series.interpolate(
                    "slinear",
                    limit_direction="both",
                    limit_area="inside",
                    limit=sigma + 1,
                ),
                sigma + 1,
            ),
            index=series.index,
        )

        new_series.loc[indices] = old_series[indices]

        indices = old_series.dropna().index
        old_series = new_series

    return new_series


def median_interpolation(series):
    old_series = series.copy()
    for subset_length in range(30):
        new_series = {"system:time_start": [], "interpolated": []}

        for idx, item in enumerate(old_series.iteritems()):
            start = idx - subset_length
            end = idx + subset_length + 1
            if start < 0:
                start = 0
            if end > len(old_series):
                end = len(old_series)

            left_len = len(old_series[start:idx].dropna())
            right_len = len(old_series[idx + 1 : end].dropna())
            timestamp, val = item
            if (
                math.isnan(val)
                and left_len > 0
                and right_len > 0
                and min(left_len, right_len) / max(left_len, right_len) >= 0.5
            ):
                new_series["system:time_start"].append(timestamp)
                if (idx % 2) == 0:
                    new_series["interpolated"].append(old_series[start:end].median())
                if (idx % 2) == 1:
                    new_series["interpolated"].append(old_series[start:end].mean())
            else:
                new_series["system:time_start"].append(timestamp)
                new_series["interpolated"].append(val)

        df = pd.DataFrame(new_series)
        df.index = df["system:time_start"]

        new_series = df["interpolated"]
        old_series = new_series

    return new_series


def main(args):
    ts_df = pd.read_csv(args.input, thousands=",")
    ts_df["system:time_start"] = pd.to_datetime(ts_df["system:time_start"])
    ts_df.index = ts_df["system:time_start"]
    del ts_df["system:time_start"]
    ts_df = ts_df.asfreq("D")

    for band in ts_df.columns:
        first_valid = ts_df[band][ts_df[band].notnull()].index[0]
        last_valid = ts_df[band][ts_df[band].notnull()].index[-1]
        tmp = ts_df.loc[first_valid:last_valid].copy()
        tmp["Date"] = tmp.index
        tmp["mask"] = tmp[band].isnull()
        tmp["mask"].mask(tmp["mask"] == True, "Interpolated", inplace=True)
        tmp["mask"].mask(tmp["mask"] == False, "Original", inplace=True)

        if args.type == "linear":
            tmp[band] = tmp[band].interpolate(
                "linear", limit_direction="both", limit_area="inside", limit=3
            )
        if args.type == "slinear":
            tmp[band] = tmp[band].interpolate(
                "slinear", limit_direction="both", limit_area="inside", limit=3
            )
        if args.type == "median":
            tmp[band] = median_interpolation(tmp[band])

        if args.type == "gaussian":
            tmp[band] = gaussian_interpolation(tmp[band])

        tmp[band] = interQuantileMask(tmp[band], low="", high="")

        sns.set_style("dark")
        _, _ = plt.subplots(figsize=(20, 4))
        sns.scatterplot(data=tmp, x="Date", y=band, hue="mask", style="mask", s=5)
        plt.grid()
        plt.show()

        ts_df[f"{band}_interpolate"] = tmp[band]

    ts_df.to_csv(f"{'.'.join(args.input.split('.')[:-1])}_{args.type}.csv")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        type=str,
        help="Path to time-series data file (csv)",
        required=True,
    )
    parser.add_argument(
        "--type",
        type=str,
        choices=["linear", "slinear", "median", "gaussian"],
        default="median",
        help="Interpolation type",
    )

    args = parser.parse_args()

    main(args)
